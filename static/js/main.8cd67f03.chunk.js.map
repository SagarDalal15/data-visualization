{"version":3,"sources":["Components/NavigationBar/index.js","Components/MyTable/index.js","App.js","api.js","index.js"],"names":["NavigationBar","className","Navbar","style","justifyContent","expand","bg","variant","Brand","fontSize","href","Styles","styled","div","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","count","length","React","useState","value","setValue","onChange","useAsyncDebounce","undefined","e","target","placeholder","border","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","width","SliderColumnFilter","id","useMemo","min","values","max","forEach","row","Math","type","parseInt","backgroundColor","borderRadius","onClick","fuzzyTextFilterFn","rows","matchSorter","keys","Table","columns","data","filterTypes","fuzzyText","text","filter","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","useTable","useFilters","useGlobalFilter","getTableProps","getTableBodyProps","headerGroups","prepareRow","state","visibleColumns","firstPageRows","slice","position","padding","map","headerGroup","getHeaderGroupProps","headers","borderRight","borderBottom","margin","getHeaderProps","render","canFilter","colSpan","textAlign","height","i","getRowProps","cells","cell","minWidth","maxWidth","getCellProps","autoRemove","val","MyTable","props","Header","accessor","App","getData","a","fetch","then","res","json","RawData","arr","push","setState","JSONdata","this","Component","ReactDOM","document","querySelector"],"mappings":"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","file":"static/js/main.8cd67f03.chunk.js","sourcesContent":["import React from \"react\";\nimport { Navbar, Nav } from \"react-bootstrap\";\n\nconst NavigationBar = () => {\n  return (\n    <div className=\"navigation-bar\">\n      <Navbar\n        style={{ justifyContent: \"center\" }}\n        expand=\"lg\"\n        bg=\"dark\"\n        variant=\"dark\"\n      >\n        <Navbar.Brand style={{ fontSize: \"26px\" }} href=\"#home\">\n          Data Visualization Dashboard\n        </Navbar.Brand>\n        \\\n      </Navbar>\n    </div>\n  );\n};\nexport default NavigationBar;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport {\n  useTable,\n  useFilters,\n  useGlobalFilter,\n  useAsyncDebounce,\n} from \"react-table\";\n// A great library for fuzzy filtering/sorting items\nimport { matchSorter } from \"match-sorter\";\nimport \"./style.css\";\n\nconst Styles = styled.div`\n  table {\n    border-spacing: 0;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th {\n      margin: 0;\n      padding: 0.5rem;\n      background: #87cefa;\n      font-size: 12px;\n      :last-child {\n        border-right: 0;\n      }\n    }\n\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      background-color: #fbfbfb;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`;\n\n// Define a default UI for filtering\nfunction GlobalFilter({\n  preGlobalFilteredRows,\n  globalFilter,\n  setGlobalFilter,\n}) {\n  const count = preGlobalFilteredRows.length;\n  const [value, setValue] = React.useState(globalFilter);\n  const onChange = useAsyncDebounce((value) => {\n    setGlobalFilter(value || undefined);\n  }, 200);\n\n  return (\n    <span>\n      Search:{\" \"}\n      <input\n        value={value || \"\"}\n        onChange={(e) => {\n          setValue(e.target.value);\n          onChange(e.target.value);\n        }}\n        placeholder={`${count} records...`}\n        style={{\n          fontSize: \"1.1rem\",\n          border: \"0\",\n        }}\n      />\n    </span>\n  );\n}\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  const count = preFilteredRows.length;\n\n  return (\n    <input\n      style={{ width: \"100px\" }}\n      value={filterValue || \"\"}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search`}\n    />\n  );\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nfunction SelectColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set();\n    preFilteredRows.forEach((row) => {\n      options.add(row.values[id]);\n    });\n    return [...options.values()];\n  }, [id, preFilteredRows]);\n\n  // Render a multi-select box\n  return (\n    <select\n      value={filterValue}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined);\n      }}\n    >\n      <option value=\"\">All</option>\n      {options.map((option, i) => (\n        <option key={i} value={option}>\n          {option}\n        </option>\n      ))}\n    </select>\n  );\n}\n\n// This is a custom filter UI that uses a\n// slider to set the filter value between a column's\n// min and max values\nfunction SliderColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n  // Calculate the min and max\n  // using the preFilteredRows\n\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach((row) => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n\n  return (\n    <>\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        value={filterValue || min}\n        onChange={(e) => {\n          setFilter(parseInt(e.target.value, 10));\n        }}\n      />\n      <button\n        style={{\n          backgroundColor: \"none\",\n          borderRadius: \"5px\",\n          fontSize: \"9px\",\n        }}\n        onClick={() => setFilter(undefined)}\n      >\n        Off\n      </button>\n    </>\n  );\n}\n\n// This is a custom UI for our 'between' or number range\n// filter. It uses two number boxes and filters rows to\n// ones that have values between the two\nfunction NumberRangeColumnFilter({\n  column: { filterValue = [], preFilteredRows, setFilter, id },\n}) {\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach((row) => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n      }}\n    >\n      <input\n        value={filterValue[0] || \"\"}\n        type=\"number\"\n        onChange={(e) => {\n          const val = e.target.value;\n          setFilter((old = []) => [\n            val ? parseInt(val, 10) : undefined,\n            old[1],\n          ]);\n        }}\n        placeholder={`Min (${min})`}\n        style={{\n          width: \"70px\",\n          marginRight: \"0.5rem\",\n        }}\n      />\n      to\n      <input\n        value={filterValue[1] || \"\"}\n        type=\"number\"\n        onChange={(e) => {\n          const val = e.target.value;\n          setFilter((old = []) => [\n            old[0],\n            val ? parseInt(val, 10) : undefined,\n          ]);\n        }}\n        placeholder={`Max (${max})`}\n        style={{\n          width: \"70px\",\n          marginLeft: \"0.5rem\",\n        }}\n      />\n    </div>\n  );\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] });\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = (val) => !val;\n\n// Our table component\nfunction Table({ columns, data }) {\n  const filterTypes = React.useMemo(\n    () => ({\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows, id, filterValue) => {\n        return rows.filter((row) => {\n          const rowValue = row.values[id];\n          return rowValue !== undefined\n            ? String(rowValue)\n                .toLowerCase()\n                .startsWith(String(filterValue).toLowerCase())\n            : true;\n        });\n      },\n    }),\n    []\n  );\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n    }),\n    []\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n    visibleColumns,\n    preGlobalFilteredRows,\n    setGlobalFilter,\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn, // Be sure to pass the defaultColumn option\n      filterTypes,\n    },\n    useFilters, // useFilters!\n    useGlobalFilter // useGlobalFilter!\n  );\n\n  // We don't want to render all of the rows for this example, so cap\n  // it for this use case\n  const firstPageRows = rows.slice(0, 1000);\n\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead\n          style={{\n            position: \"absolute\",\n            padding: \"0px\",\n          }}\n        >\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th\n                  style={{\n                    borderRight: \"1px solid black\",\n                    borderBottom: \"1px solid black\",\n                    margin: \"0px\",\n                  }}\n                  {...column.getHeaderProps()}\n                >\n                  {column.render(\"Header\")}\n                  {/* Render the columns filter UI */}\n                  <div style={{ width: \"121px\" }}>\n                    {column.canFilter ? column.render(\"Filter\") : null}\n                  </div>\n                </th>\n              ))}\n            </tr>\n          ))}\n          <tr>\n            <th\n              colSpan={visibleColumns.length}\n              style={{\n                textAlign: \"left\",\n              }}\n            >\n              <GlobalFilter\n                preGlobalFilteredRows={preGlobalFilteredRows}\n                globalFilter={state.globalFilter}\n                setGlobalFilter={setGlobalFilter}\n              />\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr style={{ height: \"120px\" }}></tr>\n        </tbody>\n        <tbody {...getTableBodyProps()}>\n          {firstPageRows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr style={{ height: \"auto\" }} {...row.getRowProps()}>\n                {row.cells.map((cell) => {\n                  return (\n                    <td\n                      style={{\n                        minWidth: \"138px\",\n                        maxWidth: \"138px\",\n                      }}\n                      {...cell.getCellProps()}\n                    >\n                      {cell.render(\"Cell\")}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      <br />\n      <div style={{ width: \"1200px\" }}>Showing {rows.length} results</div>\n      <div>\n        <pre>{/* <code>{JSON.stringify(state.filters, null, 2)}</code> */}</pre>\n      </div>\n    </>\n  );\n}\n\n// Define a custom filter filter function!\nfunction filterGreaterThan(rows, id, filterValue) {\n  return rows.filter((row) => {\n    const rowValue = row.values[id];\n    return rowValue >= filterValue;\n  });\n}\n\n// This is an autoRemove method on the filter function that\n// when given the new filter value and returns true, the filter\n// will be automatically removed. Normally this is just an undefined\n// check, but here, we want to remove the filter if it's not a number\nfilterGreaterThan.autoRemove = (val) => typeof val !== \"number\";\n\nfunction MyTable(props) {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"Intensity\",\n        accessor: \"intensity\",\n        filter: \"equals\",\n      },\n      {\n        Header: \"Likelihood\",\n        accessor: \"likelihood\",\n        filter: \"equals\",\n      },\n      {\n        Header: \"Relevance\",\n        accessor: \"relevance\",\n        Filter: SliderColumnFilter,\n        filter: \"equals\",\n      },\n      {\n        Header: \"Year\",\n        accessor: \"year\",\n      },\n      {\n        Header: \"Country\",\n        accessor: \"country\",\n      },\n      {\n        Header: \"Topic\",\n        accessor: \"topic\",\n      },\n      {\n        Header: \"Region\",\n        accessor: \"region\",\n      },\n      {\n        Header: \"Source\",\n        accessor: \"source\",\n      },\n    ],\n    []\n  );\n\n  const data = props.data;\n\n  return (\n    <div className=\"table\">\n      <Styles>\n        <Table data={data} columns={columns} />\n      </Styles>\n    </div>\n  );\n}\n\nexport default MyTable;\n","import React from \"react\";\nimport { getRawData } from \"./api\";\nimport { NavigationBar, MyTable } from \"./Components\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      JSONdata: [],\n    };\n  }\n\n  //Get Data from DB\n  getData = async () => {\n    const RawData = await getRawData();\n    var i;\n    var arr = [];\n    RawData.map((e) => {\n      arr.push(e);\n    });\n\n    this.setState({ JSONdata: arr });\n  };\n  componentDidMount() {\n    this.getData();\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"app_navigation-bar\">\n          <NavigationBar />\n        </div>\n        <div className=\"app_Table-wrapper\">\n          <div className=\"app_Table\">\n            <MyTable data={this.state.JSONdata} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","export const getRawData = () =>\n  fetch(\"http://localhost:4000/\").then((res) => res.json());\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}